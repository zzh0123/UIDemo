package com.zzh.uidemo.file1.file2
//组件配置--必须
if (isAssetsModule.toBoolean()) {
    apply plugin: 'com.android.library'//集成开发模式
} else {
    apply plugin: 'com.android.application'//组件开发模式，独立运行
    apply plugin: 'replugin-host-gradle'
}
apply plugin: 'com.jakewharton.butterknife'
//end
def config = rootProject.ext.android // 配置
def librarys = rootProject.ext.dependencies // 依赖

project.ext.publication = [
        ARTIFACTID     : 'assets',
        ARTIFACTVERSION: '1.0.3'
]

apply from: "$rootDir/push.gradle"
android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        //组件配置--必须
        if (!isAssetsModule.toBoolean()) {//组件模式
            applicationId "com.hmfl.assetsmodule"
            javaCompileOptions {
                annotationProcessorOptions {
                    includeCompileClasspath true
                }
            }
            //X5兼容64位手机
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
            }
        }
        //end
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled true
        //强制前缀
        resourcePrefix "assets_"
        //Arouter路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            //组件配置--必须
            if (isAssetsModule.toBoolean()) {//集成模式
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
                //release模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            } else {//组件开发模式，独立运行
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            }
            //end
        }
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
}
//组件配置--必须
if (!isAssetsModule.toBoolean()) {//组件开发模式，独立运行
    repluginHostConfig {
        useAppCompat = true
    }
}
//end

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.2'
    compile project(':baseFunctionModule:baseutillib')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    annotationProcessor librarys.arouterCompiler
    annotationProcessor librarys.butterknife_compiler
}
